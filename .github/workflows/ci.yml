name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Install dependencies for safety check
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Check Python dependencies for vulnerabilities
        run: |
          pip install -r requirements.txt || pip install -e .
          safety check --json --continue-on-error

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r mfdr/ -f json -o bandit-results.json || true
          
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-results.json

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint mypy black isort

      - name: Run flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 mfdr/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 mfdr/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run pylint
        run: |
          pylint mfdr/ --exit-zero --output-format=json > pylint-results.json || true

      - name: Check code formatting with black
        run: |
          black --check mfdr/ || echo "Code formatting issues found. Run 'black mfdr/' to fix."

      - name: Check import sorting with isort
        run: |
          isort --check-only mfdr/ || echo "Import sorting issues found. Run 'isort mfdr/' to fix."

      - name: Run type checking with mypy
        run: |
          mypy mfdr/ --ignore-missing-imports || true

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to save CI time
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ffmpeg || true

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-timeout
          pip install -e .

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=mfdr \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.os }}-py${{ matrix.python-version }}
          path: htmlcov/

      - name: Check coverage threshold
        run: |
          coverage_percent=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
          echo "Coverage: ${coverage_percent}%"
          if (( $(echo "$coverage_percent < 70" | bc -l) )); then
            echo "Coverage is below 70% threshold"
            exit 1
          fi

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          pip-audit --desc --format json --output pip-audit-results.json || true

      - name: Upload pip-audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-results
          path: pip-audit-results.json

      - name: Check for outdated dependencies
        run: |
          pip install pip-outdated
          pip-outdated || true

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/owasp-top-ten

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check licenses
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --fail-on="GPL;LGPL" || echo "Warning: GPL/LGPL licensed dependencies found"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  integration-test:
    name: Integration Tests
    runs-on: macos-latest
    needs: [test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          brew install ffmpeg || true
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov

      - name: Run integration tests
        run: |
          pytest tests/test_integration.py -v --cov=mfdr --cov-report=term-missing

  publish-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/test-results-*.xml
          check_name: Test Results
          comment_mode: failures

      - name: Create security summary
        if: always()
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "bandit-results/bandit-results.json" ]; then
            echo "### Bandit Results" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat bandit-results/bandit-results.json | head -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "pip-audit-results/pip-audit-results.json" ]; then
            echo "### Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat pip-audit-results/pip-audit-results.json | head -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi