name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Install dependencies for safety check
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Check Python dependencies for vulnerabilities
        run: |
          pip install -r requirements.txt || pip install -e .
          safety check --json --continue-on-error

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r mfdr/ -f json -o bandit-results.json || true
          
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-results.json

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint mypy black isort

      - name: Run flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 mfdr/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 mfdr/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run pylint
        run: |
          pylint mfdr/ --exit-zero --output-format=json > pylint-results.json || true

      - name: Check code formatting with black
        run: |
          black --check mfdr/ || echo "Code formatting issues found. Run 'black mfdr/' to fix."

      - name: Check import sorting with isort
        run: |
          isort --check-only mfdr/ || echo "Import sorting issues found. Run 'isort mfdr/' to fix."

      - name: Run type checking with mypy
        run: |
          mypy mfdr/ --ignore-missing-imports || true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-timeout
          pip install click rich mutagen fuzzywuzzy python-Levenshtein pathlib2 tqdm
          # Don't install the package itself, run from source

      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -m pytest tests/ \
            --cov=mfdr \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-config=.coveragerc \
            --junitxml=junit/test-results-ubuntu-${{ matrix.python-version }}.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-ubuntu-py${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-ubuntu-py${{ matrix.python-version }}
          path: junit/test-results-ubuntu-${{ matrix.python-version }}.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-ubuntu-py${{ matrix.python-version }}
          path: htmlcov/

      - name: Check coverage threshold
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          import sys
          
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage_percent = float(root.attrib['line-rate']) * 100
          
          print(f'Coverage: {coverage_percent:.2f}%')
          
          if coverage_percent < 70:
              print('❌ Coverage is below 70% threshold')
              sys.exit(1)
          else:
              print('✅ Coverage meets threshold')
          "

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          pip-audit --desc --format json --output pip-audit-results.json || true

      - name: Upload pip-audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-results
          path: pip-audit-results.json

      - name: Check for outdated dependencies
        run: |
          pip list --outdated || true

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep SARIF
        run: |
          pip install semgrep
          # Create empty SARIF file first to ensure it exists
          echo '{"version":"2.1.0","runs":[]}' > semgrep.sarif
          # Run semgrep and overwrite the file if successful
          semgrep --config=auto \
            --config=p/security-audit \
            --config=p/python \
            --config=p/owasp-top-ten \
            --sarif \
            --output=semgrep.sarif \
            . || echo "Semgrep scan completed with issues"
          # Verify the file exists and has content
          if [ ! -s semgrep.sarif ]; then
            echo '{"version":"2.1.0","runs":[]}' > semgrep.sarif
          fi
        continue-on-error: true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep
        continue-on-error: true

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check licenses
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --fail-on="GPL;LGPL" || echo "Warning: GPL/LGPL licensed dependencies found"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
  publish-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/test-results-*.xml
          check_name: Test Results
          comment_mode: off
          check_run: false
          compare_to_earlier_commit: false
          job_summary: true

      - name: Create security summary
        if: always()
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "bandit-results/bandit-results.json" ]; then
            echo "### Bandit Results" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat bandit-results/bandit-results.json | head -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "pip-audit-results/pip-audit-results.json" ]; then
            echo "### Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat pip-audit-results/pip-audit-results.json | head -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi